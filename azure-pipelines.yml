trigger:
  branches:
    include:
    - master
    - validate/*
  paths:
    exclude:
    - doc/
    - '*.md'
    - .vscode/

variables:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  #codecov_token: # Get a new one from https://codecov.io/
  #ci_feed: # find guid used by Azure DevOps Artifacts for the feed
  NUGET_PACKAGES: $(Agent.TempDirectory)/.nuget/packages


jobs:
- job: Windows
  pool:
    vmImage: windows-2019
  steps:
  - checkout: self
    clean: true

  - template: azure-pipelines/steps/install-nuget.yml
  - template: azure-pipelines/steps/restore-solution.yml

  - task: MSBuild@1
    displayName: 'Build'
    inputs:
      solution: 'XGraphics.sln'
      configuration: 'Release'
      # This workaround is currently needed per https://github.com/microsoft/azure-pipelines-image-generation/blob/91fcf62e28a7e05686b780f78a890598a8a60483/images/win/Vs2019-Server2019-Readme.md#known-issues
      msbuildArguments: /p:JavaSdkDirectory="$(JAVA_HOME_8_X64)"

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Windows'
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)'
      ArtifactName: WindowsArtifacts


- job: macOS
  pool:
    vmImage: macOS 10.14
  steps:
  - checkout: self
    clean: true

  # To manually select a Xamarin SDK version on the Microsoft-hosted macOS agent,
  # configure this task with the *Mono* version that is associated with the
  # Xamarin SDK version that you need, and set the "enabled" property to true.
  # See https://go.microsoft.com/fwlink/?linkid=871629
  - script: sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh 6_4_0
    displayName: 'Select the Xamarin SDK version'
    enabled: true

  - template: azure-pipelines/steps/install-nuget.yml
  - template: azure-pipelines/steps/restore-solution.yml

  - task: MSBuild@1
    inputs:
      solution: '**/*iOS.csproj'
      configuration: 'Release'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Mac'
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)'
      ArtifactName: MacArtifacts


- job: WrapUp
  dependsOn:
  - Windows
  - macOS
  pool:
    vmImage: Ubuntu 16.04
  condition: succeededOrFailed()
  steps:
  - checkout: self
    clean: true

  - template: azure-pipelines/steps/install-nuget.yml

  - task: DownloadBuildArtifacts@0
    displayName: 'Download build artifact WindowsArtifacts'
    inputs:
      artifactName: 'WindowsArtifacts'
      downloadPath: '$(Build.ArtifactsDirectory)'

  - task: DownloadBuildArtifacts@0
    displayName: 'Download build artifact MacArtifacts'
    inputs:
      artifactName: 'MacArtifacts'
      downloadPath: '$(Build.ArtifactsDirectory)'

  - task: NuGetCommand@2
    displayName: 'Make NuGet Package Release'
    inputs:
      command: pack
      feedsToUse: config
      packagesToPack: '.nuspec/*.nuspec'
      packDestination: '$(Build.ArtifactStagingDirectory)/nuget/release'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: nuget'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/nuget'
      ArtifactName: nuget
