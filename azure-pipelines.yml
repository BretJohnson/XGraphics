trigger:
  branches:
    include:
    - master
    - validate/*
  paths:
    exclude:
    - doc/
    - '*.md'
    - .vscode/

variables:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  #codecov_token: # Get a new one from https://codecov.io/
  #ci_feed: # find guid used by Azure DevOps Artifacts for the feed
  NUGET_PACKAGES: $(Agent.TempDirectory)/.nuget/packages
  xcodeRoot: /Applications/Xcode_11.app
  nugetVersion: '5.2.0'

jobs:
- job: macOS
  pool:
    vmImage: macOS 10.14
  steps:
  - checkout: self
    clean: true

  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk'
    inputs:
      packageType: sdk
      version: 3.0.100
      installationPath: $(Agent.ToolsDirectory)/dotnet    

  - script: /bin/bash -c "sudo xcode-select -s /Applications/Xcode_11.app/Contents/Developer"
    displayName: 'Select Xcode version'
    enabled: true

  # To manually select a Xamarin SDK version on the Microsoft-hosted macOS agent,
  # configure this task with the *Mono* version that is associated with the
  # Xamarin SDK version that you need, and set the "enabled" property to true.
  # See https://go.microsoft.com/fwlink/?linkid=871629
  - script: sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh 6_4_0
    displayName: 'Select the Xamarin SDK version'
    enabled: true

  - task: MSBuild@1
    inputs:
      solution: 'src/**/*iOS.csproj'
      configuration: 'Release'
      msbuildArguments: /t:Restore,Build

  - task: CopyFiles@2
    displayName: 'Copy build to artifact staging'
    inputs:
      Contents: |
        src/SkiaRenderer/XGraphics.SkiaRenderer.iOS/bin/**/*.dll
        src/SkiaRenderer/XGraphics.SkiaRenderer.iOS/bin/**/*.pdb
        src/SkiaRenderer/XGraphics.SkiaRenderer.iOS/bin/**/*.mdb
        src/XamarinForms/XGraphics.XamarinForms.iOS/bin/**/*.dll
        src/XamarinForms/XGraphics.XamarinForms.iOS/bin/**/*.pdb
        src/XamarinForms/XGraphics.XamarinForms.iOS/bin/**/*.mdb
      TargetFolder: $(Build.ArtifactStagingDirectory)

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: MacBuild'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: MacBuild

- job: Windows
  dependsOn:
  - macOS
  pool:
    vmImage: windows-2019
  steps:
  - checkout: self
    clean: true

  - task: NuGetToolInstaller@0
    displayName: 'Use NuGet $(nugetVersion)'
    inputs:
      versionSpec: $(nugetVersion)

  - task: NuGetCommand@2
    displayName: 'NuGet restore'
    inputs:
      restoreSolution: XGraphics.sln

  - task: MSBuild@1
    displayName: 'Build'
    inputs:
      solution: 'XGraphics.sln'
      configuration: 'Release'
      # This workaround is currently needed per https://github.com/microsoft/azure-pipelines-image-generation/blob/91fcf62e28a7e05686b780f78a890598a8a60483/images/win/Vs2019-Server2019-Readme.md#known-issues
      msbuildArguments: /p:JavaSdkDirectory="$(JAVA_HOME_8_X64)"

  - task: DownloadBuildArtifacts@0
    displayName: 'Download build artifact MacBuild'
    inputs:
      artifactName: 'MacBuild'
      downloadPath: '$(Build.ArtifactsDirectory)/MacBuild'

  - task: CopyFiles@2
    displayName: 'Copy Files to: $(System.DefaultWorkingDirectory)'
    inputs:
      SourceFolder: '$(Build.ArtifactsDirectory)/MacBuild'
      TargetFolder: '$(System.DefaultWorkingDirectory)'

  - task: NuGetCommand@2
    displayName: 'Make NuGet Package Release'
    inputs:
      command: pack
      feedsToUse: config
      packagesToPack: 'nuspec/*.nuspec'
      packDestination: '$(Build.ArtifactStagingDirectory)/nuget/release'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: nuget'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/nuget'
      ArtifactName: nuget
